---
- name: Setup complet de la machine backup  # Nom du playbook
  hosts: backup  # S'exécute sur l'hôte ou le groupe nommé "backup"
  become: true   # Exécuter les tâches avec les privilèges root

  vars:  # Définition des variables réutilisées dans le playbook
    backup_user: backupesiee  # Nom de l'utilisateur dédié à la sauvegarde
    backup_pass: "{{ 'esiee' | password_hash('sha512') }}"  # Mot de passe hashé de l'utilisateur backup
    replicat_host: 192.168.203.154  # Adresse IP de la machine source (replicat)
    remote_db_user: root  # Nom d'utilisateur pour la base de données distante
    remote_db_pass: superpassword  # Mot de passe pour la base de données distante
    backup_dir: /var/backups  # Dossier local où seront stockées les sauvegardes

  tasks:

    - name: Créer l'utilisateur backupesiee
      user:
        name: "{{ backup_user }}"
        password: "{{ backup_pass }}"
        shell: /bin/bash
        create_home: yes  # Crée un répertoire personnel pour l'utilisateur

    - name: Créer le dossier .ssh
      file:
        path: "/home/{{ backup_user }}/.ssh"
        state: directory
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: '0700'  # Permissions sécurisées pour le dossier SSH

    - name: Générer une clé SSH pour backupesiee
      command: ssh-keygen -t rsa -b 4096 -f /home/{{ backup_user }}/.ssh/id_rsa -N ""
      args:
        creates: "/home/{{ backup_user }}/.ssh/id_rsa"  # Évite de recréer la clé si elle existe déjà

    - name: S'assurer que les droits sont corrects
      file:
        path: "/home/{{ backup_user }}/.ssh"
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        recurse: true  # Applique les permissions à tout le contenu

    - name: Créer le dossier de backup
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        mode: '0755'  # Dossier accessible à la lecture pour tous, mais modifiable seulement par le propriétaire

    - name: Déployer le script de récupération de dump MySQL
      copy:
        dest: /usr/local/bin/fetch_replicat_backup.sh
        mode: '0755'  # Exécutable par tous, modifiable uniquement par le propriétaire
        owner: "{{ backup_user }}"
        group: "{{ backup_user }}"
        content: |
          #!/bin/bash
          NOW=$(date +"%Y%m%d_%H%M")  # Génère un timestamp pour le nom du fichier
          BACKUP_NAME="db_backup_$NOW.sql.gz"  # Nom du fichier de sauvegarde
          ssh {{ remote_db_user }}@{{ replicat_host }} "mysqldump -u {{ remote_db_user }} -p'{{ remote_db_pass }}' --all-databases | gzip" > {{ backup_dir }}/$BACKUP_NAME
          # Exécute un dump compressé de toutes les bases de données sur replicat et le récupère localement

    - name: Créer une tâche cron toutes les heures
      cron:
        name: "Sauvegarde distante MySQL depuis replicat"
        user: "{{ backup_user }}"
        job: "/usr/local/bin/fetch_replicat_backup.sh"
        minute: "0"  # Lance la tâche à chaque début d’heure
